{"name": "Визуальная выделенность кнопки 'Войти' (hover-эффект)", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=138.0.7204.169)\nStacktrace:\n\tGetHandleVerifier [0x0xa61af3+62339]\n\tGetHandleVerifier [0x0xa61b34+62404]\n\t(No symbol) [0x0x8a2123]\n\t(No symbol) [0x0x880fc9]\n\t(No symbol) [0x0x915aee]\n\t(No symbol) [0x0x930089]\n\t(No symbol) [0x0x90f1b6]\n\t(No symbol) [0x0x8de7a2]\n\t(No symbol) [0x0x8df644]\n\tGetHandleVerifier [0x0xcd6683+2637587]\n\tGetHandleVerifier [0x0xcd1a8a+2618138]\n\tGetHandleVerifier [0x0xa8856a+220666]\n\tGetHandleVerifier [0x0xa78998+156200]\n\tGetHandleVerifier [0x0xa7f12d+182717]\n\tGetHandleVerifier [0x0xa69a38+94920]\n\tGetHandleVerifier [0x0xa69bc2+95314]\n\tGetHandleVerifier [0x0xa54d0a+9626]\n\tBaseThreadInitThunk [0x0x76625d49+25]\n\tRtlInitializeExceptionChain [0x0x7790d2fb+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7790d281+561]", "trace": "@pytest.fixture\n    def driver():\n        options = webdriver.ChromeOptions()\n        options.add_argument('--start-maximized')\n        options.add_argument(\"--disable-blink-features=AutomationControlled\")\n        options.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\n        options.add_experimental_option(\"useAutomationExtension\", False)\n        options.add_argument(\"user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n                             \"AppleWebKit/537.36 Chrome/113.0.0.0 Safari/537.36\")\n    \n        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n    \n        # Убираем определения WebDriver\n        driver.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\", {\n            \"source\": \"\"\"\n                Object.defineProperty(navigator, 'webdriver', { get: () => undefined });\n                window.navigator.chrome = { runtime: {} };\n                Object.defineProperty(navigator, 'languages', { get: () => ['ru-RU', 'ru'] });\n                Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });\n            \"\"\"\n        })\n    \n        driver.get(\"https://www.kinopoisk.ru/\")\n    \n        # Загрузка cookies\n        try:\n            with open(\"kinopoisk_cookies.json\", \"r\", encoding=\"utf-8\") as f:\n                cookies = json.load(f)\n            for cookie in cookies:\n                if \"domain\" in cookie and \"kinopoisk.ru\" in cookie[\"domain\"]:\n                    # Пропустить куки с неподходящим доменом (например, поддомены)\n                    if cookie.get(\"domain\") != \".kinopoisk.ru\":\n                        continue\n                    try:\n                        driver.add_cookie(cookie)\n                    except Exception as e:\n                        print(f\"Ошибка с кукой {cookie.get('name', 'unknown')}: {e}\")\n        except Exception as e:\n            print(f\"Ошибка загрузки cookies: {e}\")\n    \n>       driver.refresh()\n\nconftest.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:716: in refresh\n    self.execute(Command.REFRESH)\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F21CEB3490>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7790d2fb+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7790d281+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=138.0.7204.169)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xa61af3+62339]\nE       \tGetHandleVerifier [0x0xa61b34+62404]\nE       \t(No symbol) [0x0x8a2123]\nE       \t(No symbol) [0x0x880fc9]\nE       \t(No symbol) [0x0x915aee]\nE       \t(No symbol) [0x0x930089]\nE       \t(No symbol) [0x0x90f1b6]\nE       \t(No symbol) [0x0x8de7a2]\nE       \t(No symbol) [0x0x8df644]\nE       \tGetHandleVerifier [0x0xcd6683+2637587]\nE       \tGetHandleVerifier [0x0xcd1a8a+2618138]\nE       \tGetHandleVerifier [0x0xa8856a+220666]\nE       \tGetHandleVerifier [0x0xa78998+156200]\nE       \tGetHandleVerifier [0x0xa7f12d+182717]\nE       \tGetHandleVerifier [0x0xa69a38+94920]\nE       \tGetHandleVerifier [0x0xa69bc2+95314]\nE       \tGetHandleVerifier [0x0xa54d0a+9626]\nE       \tBaseThreadInitThunk [0x0x76625d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7790d2fb+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7790d281+561]\n\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "stdout", "source": "2c3f2a54-2da6-45a3-8468-79ed82d31761-attachment.txt", "type": "text/plain"}], "start": 1753731455208, "stop": 1753731455208, "uuid": "5a46247a-124d-476e-a89d-c578b24a9761", "historyId": "5471e924af373272fc5c51cbc06006e3", "testCaseId": "5471e924af373272fc5c51cbc06006e3", "fullName": "tests.test_ui#test_login_button_highlight", "labels": [{"name": "tag", "value": "ui"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_ui"}, {"name": "host", "value": "Popboom"}, {"name": "thread", "value": "27352-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_ui"}], "titlePath": ["tests", "test_ui.py"]}